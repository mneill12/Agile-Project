<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:ClientDesktop.ViewModels"
             xmlns:v="clr-namespace:ClientDesktop.Views" xmlns:Custom="http://metro.mahapps.com/winfx/xaml/controls" x:Class="ClientDesktop.App"
             >
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Steel.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseDark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />
                <ResourceDictionary Source="/Resources/Icons.xaml" />

            </ResourceDictionary.MergedDictionaries>
            <SolidColorBrush x:Key="WindowTitleColorBrush" Color="Black" />
            
            <Style TargetType="{x:Type GridViewColumnHeader}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Style>

            <Style TargetType="{x:Type ListViewItem}">
                <Style.Triggers>
                    <Trigger Property="ListViewItem.Foreground" Value="White"/>
                    <Trigger Property="ListViewItem.Padding" Value="10"/>
                    <Trigger Property="ListViewItem.IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="Background" Value="Black"/>
                        <Setter Property="BorderBrush" Value="White"/>
                        <Setter Property="BorderThickness" Value="1"/>
                    </Trigger>
                    <Trigger Property="ListViewItem.IsSelected" Value="True">
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="Background" Value="Black"/>
                        <Setter Property="BorderBrush" Value="White"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="FontWeight" Value="Bold"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!--<Style TargetType="{x:Type TabItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid>
                                <Border Name="Border" Margin="0" Background="Transparent"
                  BorderBrush="Black" BorderThickness="1" CornerRadius="5">
                                    <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              ContentSource="Header" Margin="12,2,12,2"
                              RecognizesAccessKey="True">
                                    </ContentPresenter>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Panel.ZIndex" Value="100" />
                                    <Setter TargetName="Border" Property="Background" Value="Black" />
                                    <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                                 
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="Black" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="Black" />
                                    
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>-->
            <Style x:Key="CorneredTextbox" TargetType="{x:Type TextBox}">
                <Setter Property="ContextMenu" Value="{DynamicResource TextBoxMetroContextMenu}"/>
                <Setter Property="Custom:TextBoxHelper.IsMonitoring" Value="True"/>
                <Setter Property="Custom:ControlsHelper.ButtonWidth" Value="22"/>
                <Setter Property="SelectionBrush" Value="{DynamicResource HighlightBrush}"/>
                <Setter Property="FontFamily" Value="{DynamicResource ContentFontFamily}"/>
                <Setter Property="FontSize" Value="{DynamicResource ContentFontSize}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="MinHeight" Value="26"/>
                <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
                <Setter Property="Custom:ControlsHelper.FocusBorderBrush" Value="{DynamicResource TextBoxFocusBorderBrush}"/>
                <Setter Property="Custom:ControlsHelper.MouseOverBorderBrush" Value="{DynamicResource TextBoxMouseOverBorderBrush}"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}"/>
                <Setter Property="CaretBrush" Value="{DynamicResource BlackBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="enterGotFocus">
                                    <DoubleAnimation Duration="0:0:0.2" To="0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="exitGotFocus">
                                    <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="enterHasText">
                                    <DoubleAnimation Duration="0:0:0.2" From="0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="exitHasText">
                                    <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <Border x:Name="Base" CornerRadius="10" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Grid x:Name="PART_InnerGrid" Margin="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition x:Name="ButtonColumn" Width="{Binding (Custom:ControlsHelper.ButtonWidth), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition x:Name="ButtonRow" Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Border x:Name="ReadOnlyVisualElement" Background="{x:Null}" Grid.ColumnSpan="2" Opacity="0" Grid.Row="1"/>
                                    <ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" Background="{x:Null}" Grid.Column="0" IsTabStop="False" Margin="2" Grid.Row="1" VerticalAlignment="Stretch"/>
                                    <TextBlock x:Name="Message" Grid.Column="0" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="6,2" Opacity="0.6" Padding="{TemplateBinding Padding}" Grid.Row="1" Text="{TemplateBinding Custom:TextBoxHelper.Watermark}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <Grid x:Name="FloatingMessageContainer" Grid.ColumnSpan="2" Grid.Column="0" Height="0" IsHitTestVisible="False" Margin="5,0" Visibility="Visible">
                                        <TextBlock x:Name="FloatingMessage" Foreground="{TemplateBinding Foreground}" FontSize="{DynamicResource FloatingWatermarkFontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Opacity="0.6" Text="{TemplateBinding Custom:TextBoxHelper.Watermark}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <TextBlock.RenderTransform>
                                                <TranslateTransform/>
                                            </TextBlock.RenderTransform>
                                        </TextBlock>
                                    </Grid>
                                    <Button x:Name="PART_ClearText" Content="{Binding (Custom:TextBoxHelper.ButtonContent), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="1" Foreground="{TemplateBinding Foreground}" FontSize="16" FontFamily="{Binding (Custom:TextBoxHelper.ButtonFontFamily), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Custom:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding (Custom:TextBoxHelper.ClearTextButton), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.RowSpan="2" Style="{DynamicResource ChromelessButtonStyle}">
                                        <Button.Visibility>
                                            <Binding Mode="OneWay" Path="(Custom:TextBoxHelper.ClearTextButton)" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Button.Visibility>
                                    </Button>
                                </Grid>
                                <Border x:Name="DisabledVisualElement" BorderBrush="{DynamicResource ControlsDisabledBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value="">
                                    <Setter Property="Visibility" TargetName="Message" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.HasText), RelativeSource={RelativeSource Self}}" Value="False">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.Watermark), RelativeSource={RelativeSource Self}}" Value="">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="False">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="TextWrapping" Value="NoWrap"/>
                                        <Condition Property="AcceptsReturn" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Width" TargetName="ButtonColumn" Value="{Binding ActualHeight, ElementName=ButtonRow, Mode=OneWay}"/>
                                </MultiTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.ClearTextButton), RelativeSource={RelativeSource Self}}" Value="False">
                                    <Setter Property="Grid.ColumnSpan" TargetName="PART_ContentHost" Value="2"/>
                                    <Setter Property="Grid.ColumnSpan" TargetName="Message" Value="2"/>
                                </DataTrigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" TargetName="Base" Value="{Binding (Custom:ControlsHelper.MouseOverBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="DisabledVisualElement" Value="0.6"/>
                                </Trigger>
                                <Trigger Property="IsReadOnly" Value="True">
                                    <Setter Property="Opacity" TargetName="ReadOnlyVisualElement" Value="1"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="BorderBrush" TargetName="Base" Value="{Binding (Custom:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Foreground" TargetName="FloatingMessage" Value="{DynamicResource AccentColorBrush}"/>
                                    <Setter Property="Opacity" TargetName="FloatingMessage" Value="1"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" SourceName="PART_ClearText" Value="True">
                                    <Setter Property="Background" TargetName="PART_ClearText" Value="{DynamicResource GrayBrush8}"/>
                                    <Setter Property="Foreground" TargetName="PART_ClearText" Value="{DynamicResource AccentColorBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" SourceName="PART_ClearText" Value="True">
                                    <Setter Property="Background" TargetName="PART_ClearText" Value="{DynamicResource BlackBrush}"/>
                                    <Setter Property="Foreground" TargetName="PART_ClearText" Value="{DynamicResource WhiteBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Custom:TextBoxHelper.HasText" Value="False"/>
                                        <Condition Property="IsFocused" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                                <Trigger Property="Custom:TextBoxHelper.HasText" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" From="0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="Custom:TextBoxHelper.IsWaitingForData" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation AutoReverse="True" Duration="0:0:2" From="0" RepeatBehavior="Forever" To="1" Storyboard.TargetProperty="(Effect).Opacity" Storyboard.TargetName="Base"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Setter Property="Effect" TargetName="Base">
                                        <Setter.Value>
                                            <DropShadowEffect BlurRadius="10" Color="{DynamicResource BlackColor}" Opacity="0" ShadowDepth="0"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="Custom:TextBoxHelper.IsWaitingForData" Value="False">
                                    <Setter Property="Effect" TargetName="Base" Value="{x:Null}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>